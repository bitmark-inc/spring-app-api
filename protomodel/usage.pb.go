// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: usage.proto

/*
	Package protomodel is a generated protocol buffer package.

	It is generated from these files:
		usage.proto

	It has these top-level messages:
		PeriodData
		Group
		Usage
		UsageResponse
*/
package protomodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PeriodData struct {
	Name string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Data map[string]int64 `protobuf:"bytes,2,rep,name=data" json:"data" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *PeriodData) Reset()                    { *m = PeriodData{} }
func (m *PeriodData) String() string            { return proto.CompactTextString(m) }
func (*PeriodData) ProtoMessage()               {}
func (*PeriodData) Descriptor() ([]byte, []int) { return fileDescriptorUsage, []int{0} }

func (m *PeriodData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PeriodData) GetData() map[string]int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

type Group struct {
	Type      *PeriodData   `protobuf:"bytes,1,opt,name=type" json:"type"`
	SubPeriod []*PeriodData `protobuf:"bytes,2,rep,name=subPeriod,json=sub_period" json:"sub_period"`
	Friend    []*PeriodData `protobuf:"bytes,3,rep,name=friend" json:"friend"`
	Place     []*PeriodData `protobuf:"bytes,4,rep,name=place" json:"place"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptorUsage, []int{1} }

func (m *Group) GetType() *PeriodData {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Group) GetSubPeriod() []*PeriodData {
	if m != nil {
		return m.SubPeriod
	}
	return nil
}

func (m *Group) GetFriend() []*PeriodData {
	if m != nil {
		return m.Friend
	}
	return nil
}

func (m *Group) GetPlace() []*PeriodData {
	if m != nil {
		return m.Place
	}
	return nil
}

type Usage struct {
	SectionName      string  `protobuf:"bytes,1,opt,name=sectionName,json=section_name,proto3" json:"section_name"`
	DiffFromPrevious float64 `protobuf:"fixed64,2,opt,name=diffFromPrevious,json=diff_from_previous,proto3" json:"diff_from_previous"`
	Period           string  `protobuf:"bytes,3,opt,name=period,proto3" json:"period"`
	PeriodStartedAt  int64   `protobuf:"varint,4,opt,name=periodStartedAt,json=period_started_at,proto3" json:"period_started_at"`
	Quantity         int64   `protobuf:"varint,5,opt,name=quantity,proto3" json:"quantity"`
	Value            float64 `protobuf:"fixed64,6,opt,name=value,proto3" json:"value"`
	Groups           *Group  `protobuf:"bytes,7,opt,name=groups" json:"groups"`
}

func (m *Usage) Reset()                    { *m = Usage{} }
func (m *Usage) String() string            { return proto.CompactTextString(m) }
func (*Usage) ProtoMessage()               {}
func (*Usage) Descriptor() ([]byte, []int) { return fileDescriptorUsage, []int{2} }

func (m *Usage) GetSectionName() string {
	if m != nil {
		return m.SectionName
	}
	return ""
}

func (m *Usage) GetDiffFromPrevious() float64 {
	if m != nil {
		return m.DiffFromPrevious
	}
	return 0
}

func (m *Usage) GetPeriod() string {
	if m != nil {
		return m.Period
	}
	return ""
}

func (m *Usage) GetPeriodStartedAt() int64 {
	if m != nil {
		return m.PeriodStartedAt
	}
	return 0
}

func (m *Usage) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Usage) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Usage) GetGroups() *Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type UsageResponse struct {
	Result []*Usage `protobuf:"bytes,1,rep,name=result" json:"result"`
}

func (m *UsageResponse) Reset()                    { *m = UsageResponse{} }
func (m *UsageResponse) String() string            { return proto.CompactTextString(m) }
func (*UsageResponse) ProtoMessage()               {}
func (*UsageResponse) Descriptor() ([]byte, []int) { return fileDescriptorUsage, []int{3} }

func (m *UsageResponse) GetResult() []*Usage {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*PeriodData)(nil), "PeriodData")
	proto.RegisterType((*Group)(nil), "Group")
	proto.RegisterType((*Usage)(nil), "Usage")
	proto.RegisterType((*UsageResponse)(nil), "UsageResponse")
}
func (m *PeriodData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeriodData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x12
			i++
			v := m.Data[k]
			mapSize := 1 + len(k) + sovUsage(uint64(len(k))) + 1 + sovUsage(uint64(v))
			i = encodeVarintUsage(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintUsage(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintUsage(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsage(dAtA, i, uint64(m.Type.Size()))
		n1, err := m.Type.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.SubPeriod) > 0 {
		for _, msg := range m.SubPeriod {
			dAtA[i] = 0x12
			i++
			i = encodeVarintUsage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Friend) > 0 {
		for _, msg := range m.Friend {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintUsage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Place) > 0 {
		for _, msg := range m.Place {
			dAtA[i] = 0x22
			i++
			i = encodeVarintUsage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Usage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Usage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SectionName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUsage(dAtA, i, uint64(len(m.SectionName)))
		i += copy(dAtA[i:], m.SectionName)
	}
	if m.DiffFromPrevious != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Usage(dAtA, i, uint64(math.Float64bits(float64(m.DiffFromPrevious))))
	}
	if len(m.Period) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUsage(dAtA, i, uint64(len(m.Period)))
		i += copy(dAtA[i:], m.Period)
	}
	if m.PeriodStartedAt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUsage(dAtA, i, uint64(m.PeriodStartedAt))
	}
	if m.Quantity != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUsage(dAtA, i, uint64(m.Quantity))
	}
	if m.Value != 0 {
		dAtA[i] = 0x31
		i++
		i = encodeFixed64Usage(dAtA, i, uint64(math.Float64bits(float64(m.Value))))
	}
	if m.Groups != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUsage(dAtA, i, uint64(m.Groups.Size()))
		n2, err := m.Groups.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *UsageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, msg := range m.Result {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUsage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Usage(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Usage(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintUsage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PeriodData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovUsage(uint64(len(k))) + 1 + sovUsage(uint64(v))
			n += mapEntrySize + 1 + sovUsage(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Group) Size() (n int) {
	var l int
	_ = l
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovUsage(uint64(l))
	}
	if len(m.SubPeriod) > 0 {
		for _, e := range m.SubPeriod {
			l = e.Size()
			n += 1 + l + sovUsage(uint64(l))
		}
	}
	if len(m.Friend) > 0 {
		for _, e := range m.Friend {
			l = e.Size()
			n += 1 + l + sovUsage(uint64(l))
		}
	}
	if len(m.Place) > 0 {
		for _, e := range m.Place {
			l = e.Size()
			n += 1 + l + sovUsage(uint64(l))
		}
	}
	return n
}

func (m *Usage) Size() (n int) {
	var l int
	_ = l
	l = len(m.SectionName)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	if m.DiffFromPrevious != 0 {
		n += 9
	}
	l = len(m.Period)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	if m.PeriodStartedAt != 0 {
		n += 1 + sovUsage(uint64(m.PeriodStartedAt))
	}
	if m.Quantity != 0 {
		n += 1 + sovUsage(uint64(m.Quantity))
	}
	if m.Value != 0 {
		n += 9
	}
	if m.Groups != nil {
		l = m.Groups.Size()
		n += 1 + l + sovUsage(uint64(l))
	}
	return n
}

func (m *UsageResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovUsage(uint64(l))
		}
	}
	return n
}

func sovUsage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUsage(x uint64) (n int) {
	return sovUsage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PeriodData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeriodData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeriodData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUsage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUsage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUsage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUsage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthUsage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &PeriodData{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubPeriod = append(m.SubPeriod, &PeriodData{})
			if err := m.SubPeriod[len(m.SubPeriod)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Friend = append(m.Friend, &PeriodData{})
			if err := m.Friend[len(m.Friend)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Place", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Place = append(m.Place, &PeriodData{})
			if err := m.Place[len(m.Place)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Usage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Usage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Usage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffFromPrevious", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.DiffFromPrevious = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Period = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodStartedAt", wireType)
			}
			m.PeriodStartedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodStartedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Value = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Groups == nil {
				m.Groups = &Group{}
			}
			if err := m.Groups.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &Usage{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUsage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUsage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUsage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUsage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("usage.proto", fileDescriptorUsage) }

var fileDescriptorUsage = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xf9, 0x59, 0x9a, 0x49, 0x81, 0x60, 0x51, 0x64, 0x55, 0x28, 0x5b, 0xe5, 0x14, 0x10,
	0x6c, 0xa4, 0xe6, 0x00, 0x2a, 0xa7, 0x46, 0x05, 0x6e, 0xa8, 0x32, 0xe2, 0xbc, 0x72, 0x12, 0x27,
	0xac, 0x48, 0xd6, 0x8b, 0x7f, 0x2a, 0xe5, 0x4d, 0xfa, 0x48, 0x5c, 0x90, 0x78, 0x82, 0x55, 0x15,
	0x6e, 0xfb, 0x14, 0x68, 0xc7, 0x26, 0x6d, 0x15, 0x2e, 0xf3, 0xf3, 0x7d, 0x33, 0x6b, 0xfb, 0x9b,
	0x59, 0xe8, 0x3a, 0x23, 0x96, 0x32, 0x29, 0xb4, 0xb2, 0xea, 0xf8, 0xcd, 0x32, 0xb3, 0xdf, 0xdc,
	0x34, 0x99, 0xa9, 0xf5, 0x68, 0xa9, 0x96, 0x6a, 0x84, 0xf0, 0xd4, 0x2d, 0x30, 0xc3, 0x04, 0x23,
	0x5f, 0x3e, 0xb8, 0x26, 0x00, 0x97, 0x52, 0x67, 0x6a, 0x7e, 0x21, 0xac, 0xa0, 0x2f, 0xa0, 0x95,
	0x8b, 0xb5, 0x64, 0xe4, 0x84, 0x0c, 0x3b, 0x93, 0x83, 0xaa, 0x8c, 0x31, 0xe7, 0x68, 0xe9, 0x18,
	0x5a, 0x73, 0x61, 0x05, 0x6b, 0x9c, 0x34, 0x87, 0xdd, 0xd3, 0xa3, 0xe4, 0xb6, 0x31, 0xa9, 0xcd,
	0x87, 0xdc, 0xea, 0x8d, 0x6f, 0xaa, 0xcb, 0x38, 0xda, 0xe3, 0xb7, 0xd0, 0xd9, 0x91, 0xb4, 0x07,
	0xcd, 0xef, 0x72, 0xe3, 0x3f, 0xcf, 0xeb, 0x90, 0x3e, 0x83, 0xf6, 0x95, 0x58, 0x39, 0xc9, 0x1a,
	0x27, 0x64, 0xd8, 0xe4, 0x3e, 0x39, 0x6b, 0xbc, 0x23, 0x83, 0x5f, 0x04, 0xda, 0x9f, 0xb4, 0x72,
	0x05, 0x7d, 0x09, 0x2d, 0xbb, 0x29, 0xfc, 0xad, 0xba, 0xa7, 0xdd, 0x3b, 0xe7, 0xfa, 0xd3, 0x6a,
	0x92, 0xa3, 0xa5, 0x67, 0xd0, 0x31, 0x6e, 0xea, 0x0b, 0xc2, 0x3d, 0xef, 0xd5, 0x3f, 0xae, 0xca,
	0x18, 0x8c, 0x9b, 0xa6, 0x05, 0x62, 0xfc, 0x4e, 0x4c, 0x47, 0x10, 0x2d, 0x74, 0x26, 0xf3, 0x39,
	0x6b, 0xee, 0x37, 0x42, 0x55, 0xc6, 0x81, 0xe6, 0xc1, 0xd3, 0xd7, 0xd0, 0x2e, 0x56, 0x62, 0x26,
	0x59, 0x6b, 0xbf, 0xbe, 0x53, 0x95, 0xb1, 0x67, 0xb9, 0x77, 0x83, 0x9b, 0x06, 0xb4, 0xbf, 0xd6,
	0x93, 0xa2, 0x63, 0xe8, 0x1a, 0x39, 0xb3, 0x99, 0xca, 0x3f, 0xdf, 0x8a, 0xdd, 0xab, 0xca, 0xf8,
	0x30, 0xc0, 0x29, 0x8a, 0x7e, 0x2f, 0xa3, 0x17, 0xd0, 0x9b, 0x67, 0x8b, 0xc5, 0x47, 0xad, 0xd6,
	0x97, 0x5a, 0x5e, 0x65, 0xca, 0x19, 0xd4, 0x8c, 0x4c, 0x9e, 0x57, 0x65, 0x4c, 0x6b, 0x2e, 0x5d,
	0x68, 0xb5, 0x4e, 0x8b, 0xc0, 0xf2, 0xff, 0x60, 0x74, 0x00, 0x91, 0x7f, 0x2d, 0x6b, 0xe2, 0xa9,
	0xf8, 0xac, 0xa0, 0x45, 0xf0, 0xf4, 0x1c, 0x9e, 0xf8, 0xe8, 0x8b, 0x15, 0xda, 0xca, 0xf9, 0xb9,
	0x65, 0xad, 0x7a, 0x38, 0x93, 0xa3, 0xaa, 0x8c, 0x9f, 0x7a, 0x2a, 0x35, 0x9e, 0x4b, 0x85, 0xe5,
	0xfb, 0x10, 0x1d, 0xc2, 0xc1, 0x0f, 0x27, 0x72, 0x9b, 0xd9, 0x0d, 0x6b, 0x63, 0xef, 0x61, 0x55,
	0xc6, 0x3b, 0x8c, 0xef, 0x22, 0x1a, 0xff, 0x9b, 0x7f, 0x84, 0x6f, 0x41, 0xd9, 0x10, 0x08, 0xab,
	0x40, 0x5f, 0x41, 0xb4, 0xac, 0xb7, 0xc0, 0xb0, 0x87, 0x38, 0xfe, 0x28, 0xc1, 0xa5, 0xf0, 0x37,
	0xf7, 0x0c, 0x0f, 0x7e, 0xf0, 0x1e, 0x1e, 0xa1, 0xc2, 0x5c, 0x9a, 0x42, 0xe5, 0x06, 0x9b, 0xb5,
	0x34, 0x6e, 0x65, 0x19, 0xc1, 0x11, 0x45, 0x09, 0xf2, 0xbe, 0xd9, 0x33, 0x3c, 0xf8, 0x49, 0xef,
	0xe7, 0xb6, 0x4f, 0x7e, 0x6f, 0xfb, 0xe4, 0x66, 0xdb, 0x27, 0xd7, 0x7f, 0xfa, 0x0f, 0xa6, 0x11,
	0xfe, 0x23, 0xe3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x72, 0xb2, 0x8a, 0xa6, 0x61, 0x03, 0x00,
	0x00,
}
