// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reaction.proto

/*
	Package protomodel is a generated protocol buffer package.

	It is generated from these files:
		reaction.proto

	It has these top-level messages:
		Reaction
		ReactionsResponse
*/
package protomodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Reaction struct {
	Actor      string `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor"`
	Reaction   string `protobuf:"bytes,2,opt,name=reaction,proto3" json:"reaction"`
	ReactionId string `protobuf:"bytes,3,opt,name=reaction_id,proto3" json:"reaction_id"`
	Timestamp  int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp"`
	Title      string `protobuf:"bytes,5,opt,name=title,proto3" json:"title"`
}

func (m *Reaction) Reset()                    { *m = Reaction{} }
func (m *Reaction) String() string            { return proto.CompactTextString(m) }
func (*Reaction) ProtoMessage()               {}
func (*Reaction) Descriptor() ([]byte, []int) { return fileDescriptorReaction, []int{0} }

func (m *Reaction) GetActor() string {
	if m != nil {
		return m.Actor
	}
	return ""
}

func (m *Reaction) GetReaction() string {
	if m != nil {
		return m.Reaction
	}
	return ""
}

func (m *Reaction) GetReactionId() string {
	if m != nil {
		return m.ReactionId
	}
	return ""
}

func (m *Reaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Reaction) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type ReactionsResponse struct {
	Result []*Reaction `protobuf:"bytes,1,rep,name=result" json:"result"`
}

func (m *ReactionsResponse) Reset()                    { *m = ReactionsResponse{} }
func (m *ReactionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ReactionsResponse) ProtoMessage()               {}
func (*ReactionsResponse) Descriptor() ([]byte, []int) { return fileDescriptorReaction, []int{1} }

func (m *ReactionsResponse) GetResult() []*Reaction {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*Reaction)(nil), "Reaction")
	proto.RegisterType((*ReactionsResponse)(nil), "ReactionsResponse")
}
func (m *Reaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Actor) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReaction(dAtA, i, uint64(len(m.Actor)))
		i += copy(dAtA[i:], m.Actor)
	}
	if len(m.Reaction) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReaction(dAtA, i, uint64(len(m.Reaction)))
		i += copy(dAtA[i:], m.Reaction)
	}
	if len(m.ReactionId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintReaction(dAtA, i, uint64(len(m.ReactionId)))
		i += copy(dAtA[i:], m.ReactionId)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintReaction(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintReaction(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	return i, nil
}

func (m *ReactionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReactionsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, msg := range m.Result {
			dAtA[i] = 0xa
			i++
			i = encodeVarintReaction(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Reaction(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Reaction(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintReaction(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Reaction) Size() (n int) {
	var l int
	_ = l
	l = len(m.Actor)
	if l > 0 {
		n += 1 + l + sovReaction(uint64(l))
	}
	l = len(m.Reaction)
	if l > 0 {
		n += 1 + l + sovReaction(uint64(l))
	}
	l = len(m.ReactionId)
	if l > 0 {
		n += 1 + l + sovReaction(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovReaction(uint64(m.Timestamp))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovReaction(uint64(l))
	}
	return n
}

func (m *ReactionsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovReaction(uint64(l))
		}
	}
	return n
}

func sovReaction(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReaction(x uint64) (n int) {
	return sovReaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Reaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reaction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reaction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReactionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReactionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReactionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReactionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReactionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &Reaction{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthReaction
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReaction
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReaction(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReaction = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReaction   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("reaction.proto", fileDescriptorReaction) }

var fileDescriptorReaction = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x4d, 0x4e, 0xc3, 0x30,
	0x10, 0x85, 0x31, 0xa1, 0x55, 0x33, 0xe5, 0x37, 0x2b, 0x8b, 0x45, 0x1c, 0x75, 0x15, 0x09, 0x35,
	0x15, 0x70, 0x03, 0x1f, 0xc1, 0x17, 0x40, 0x49, 0x30, 0xc1, 0x52, 0x53, 0x47, 0xf1, 0xe4, 0x2e,
	0x1c, 0x89, 0x25, 0x2b, 0x96, 0x16, 0x0a, 0x3b, 0x9f, 0x02, 0xe1, 0x24, 0x4d, 0x57, 0xef, 0xbd,
	0xcf, 0x4f, 0xf6, 0x78, 0xe0, 0xba, 0x95, 0x79, 0x89, 0x4a, 0x1f, 0xb2, 0xa6, 0xd5, 0xa8, 0xef,
	0xb7, 0x95, 0xc2, 0xf7, 0xae, 0xc8, 0x4a, 0x5d, 0xef, 0x2a, 0x5d, 0xe9, 0x9d, 0xc7, 0x45, 0xf7,
	0xe6, 0x93, 0x0f, 0xde, 0x0d, 0xf5, 0xcd, 0x37, 0x81, 0x95, 0x18, 0x6f, 0x88, 0x18, 0x2c, 0xf2,
	0x12, 0x75, 0x4b, 0x49, 0x42, 0xd2, 0x90, 0x87, 0xce, 0xb2, 0x01, 0x88, 0x41, 0xa2, 0x14, 0x56,
	0xd3, 0x73, 0xf4, 0xdc, 0x77, 0x2e, 0x9d, 0x65, 0x47, 0x26, 0x8e, 0x2e, 0x7a, 0x84, 0xf5, 0xe4,
	0x5f, 0xd4, 0x2b, 0x0d, 0x7c, 0xf9, 0xc6, 0x59, 0x76, 0x8a, 0xc5, 0x69, 0x88, 0x1e, 0x20, 0x44,
	0x55, 0x4b, 0x83, 0x79, 0xdd, 0xd0, 0x8b, 0x84, 0xa4, 0x01, 0xbf, 0x72, 0x96, 0xcd, 0x50, 0xcc,
	0xf6, 0x7f, 0x54, 0x54, 0xb8, 0x97, 0x74, 0x31, 0x8f, 0xea, 0x81, 0x18, 0x64, 0xc3, 0xe1, 0x6e,
	0xfa, 0x97, 0x11, 0xd2, 0x34, 0xfa, 0x60, 0x64, 0xb4, 0x85, 0x65, 0x2b, 0x4d, 0xb7, 0x47, 0x4a,
	0x92, 0x20, 0x5d, 0x3f, 0x85, 0xd9, 0xd4, 0xe1, 0xe0, 0x2c, 0x1b, 0x0f, 0xc5, 0xa8, 0xfc, 0xf6,
	0xb3, 0x8f, 0xc9, 0x57, 0x1f, 0x93, 0x9f, 0x3e, 0x26, 0x1f, 0xbf, 0xf1, 0x59, 0xb1, 0xf4, 0x5b,
	0x7b, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xc1, 0xf3, 0x25, 0x76, 0x01, 0x00, 0x00,
}
