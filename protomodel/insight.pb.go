// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: insight.proto

/*
	Package protomodel is a generated protocol buffer package.

	It is generated from these files:
		insight.proto

	It has these top-level messages:
		Insight
		InsightResponse
*/
package protomodel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Insight struct {
	FbIncome     float64 `protobuf:"fixed64,1,opt,name=fbIncome,json=fb_income,proto3" json:"fb_income"`
	FbIncomeFrom int64   `protobuf:"varint,2,opt,name=fbIncomeFrom,json=fb_income_from,proto3" json:"fb_income_from"`
	FbIncomeTo   int64   `protobuf:"varint,3,opt,name=fbIncomeTo,json=fb_income_to,proto3" json:"fb_income_to"`
}

func (m *Insight) Reset()                    { *m = Insight{} }
func (m *Insight) String() string            { return proto.CompactTextString(m) }
func (*Insight) ProtoMessage()               {}
func (*Insight) Descriptor() ([]byte, []int) { return fileDescriptorInsight, []int{0} }

func (m *Insight) GetFbIncome() float64 {
	if m != nil {
		return m.FbIncome
	}
	return 0
}

func (m *Insight) GetFbIncomeFrom() int64 {
	if m != nil {
		return m.FbIncomeFrom
	}
	return 0
}

func (m *Insight) GetFbIncomeTo() int64 {
	if m != nil {
		return m.FbIncomeTo
	}
	return 0
}

type InsightResponse struct {
	Result *Insight `protobuf:"bytes,1,opt,name=result" json:"result"`
}

func (m *InsightResponse) Reset()                    { *m = InsightResponse{} }
func (m *InsightResponse) String() string            { return proto.CompactTextString(m) }
func (*InsightResponse) ProtoMessage()               {}
func (*InsightResponse) Descriptor() ([]byte, []int) { return fileDescriptorInsight, []int{1} }

func (m *InsightResponse) GetResult() *Insight {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*Insight)(nil), "Insight")
	proto.RegisterType((*InsightResponse)(nil), "InsightResponse")
}
func (m *Insight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Insight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FbIncome != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Insight(dAtA, i, uint64(math.Float64bits(float64(m.FbIncome))))
	}
	if m.FbIncomeFrom != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInsight(dAtA, i, uint64(m.FbIncomeFrom))
	}
	if m.FbIncomeTo != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInsight(dAtA, i, uint64(m.FbIncomeTo))
	}
	return i, nil
}

func (m *InsightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsightResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInsight(dAtA, i, uint64(m.Result.Size()))
		n1, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeFixed64Insight(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Insight(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintInsight(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Insight) Size() (n int) {
	var l int
	_ = l
	if m.FbIncome != 0 {
		n += 9
	}
	if m.FbIncomeFrom != 0 {
		n += 1 + sovInsight(uint64(m.FbIncomeFrom))
	}
	if m.FbIncomeTo != 0 {
		n += 1 + sovInsight(uint64(m.FbIncomeTo))
	}
	return n
}

func (m *InsightResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovInsight(uint64(l))
	}
	return n
}

func sovInsight(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInsight(x uint64) (n int) {
	return sovInsight(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Insight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInsight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Insight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Insight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FbIncome", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.FbIncome = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FbIncomeFrom", wireType)
			}
			m.FbIncomeFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FbIncomeFrom |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FbIncomeTo", wireType)
			}
			m.FbIncomeTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FbIncomeTo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInsight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInsight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInsight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInsight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &Insight{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInsight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInsight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInsight(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInsight
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInsight
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInsight
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInsight
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInsight
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInsight(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInsight = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInsight   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("insight.proto", fileDescriptorInsight) }

var fileDescriptorInsight = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0xcc, 0x2b, 0xce,
	0x4c, 0xcf, 0x28, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28,
	0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0x0b, 0x27, 0x95, 0xa6,
	0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0x51, 0xae, 0xb4, 0x98, 0x91, 0x8b, 0xdd, 0x13, 0x62, 0x80,
	0x90, 0x16, 0x17, 0x47, 0x5a, 0x92, 0x67, 0x5e, 0x72, 0x7e, 0x6e, 0xaa, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0xa3, 0x13, 0xef, 0xab, 0x7b, 0xf2, 0x9c, 0x69, 0x49, 0xf1, 0x99, 0x60, 0xc1, 0x20, 0x04,
	0x53, 0xc8, 0x82, 0x8b, 0x07, 0xa6, 0xd6, 0xad, 0x28, 0x3f, 0x57, 0x82, 0x49, 0x81, 0x51, 0x83,
	0xd9, 0x49, 0xe8, 0xd5, 0x3d, 0x79, 0x3e, 0xb8, 0xa2, 0xf8, 0xb4, 0xa2, 0xfc, 0xdc, 0x20, 0x34,
	0xbe, 0x90, 0x11, 0x17, 0x17, 0x4c, 0x67, 0x48, 0xbe, 0x04, 0x33, 0x58, 0x9f, 0xc0, 0xab, 0x7b,
	0xf2, 0x3c, 0x08, 0x75, 0x25, 0xf9, 0x41, 0x28, 0x3c, 0x25, 0x7b, 0x2e, 0x7e, 0xa8, 0x23, 0x83,
	0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x74, 0xb8, 0xd8, 0x8a, 0x52, 0x8b, 0x4b, 0x73,
	0x4a, 0xc0, 0x4e, 0xe5, 0x36, 0xe2, 0xd0, 0x83, 0xaa, 0x70, 0xe2, 0x7a, 0x75, 0x4f, 0x1e, 0x2a,
	0x17, 0x04, 0xa5, 0x9d, 0x04, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23,
	0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0xfe, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x9b, 0x55, 0x44, 0xe7, 0x3f, 0x01, 0x00, 0x00,
}
